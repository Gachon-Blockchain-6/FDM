services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: backend-container
    networks:
      - app-network
    ports:
      - "8012:3000"
    environment:
      DB_HOST: mysql-container
      DB_USER: root
      DB_PASSWORD: root
      DB_DATABASE: dockerProject
    depends_on:
      database:
        condition: service_healthy
    restart: always

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend-container
    networks:
      - app-network
    ports:
      - "8011:80"
    restart: always

  database:
    build:
      context: ./mysql
      dockerfile: Dockerfile
    container_name: mysql-container
    networks:
      - app-network
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: dockerProject
      MYSQL_CHARSET: utf8mb4
      MYSQL_COLLATION: utf8mb4_general_ci
      TZ: Asia/Seoul
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-uroot", "-proot"]
      interval: 10s
      timeout: 5s
      retries: 3
    command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci --init-connect='SET NAMES utf8mb4'

  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: nginx-container
    networks:
      - app-network
    ports:
      - "80:80"
    depends_on:
      - backend
      - frontend
    restart: always

  minio:
    image: minio/minio
    container_name: image-container
    networks:
      - app-network
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - ./miniO:/data
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9000/minio/health/ready || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: always

  minio-mc:
    image: minio/mc
    container_name: minio-mc-container
    depends_on:
      minio:
        condition: service_healthy # MinIO 서비스가 healthy 상태가 된 후 실행
    entrypoint: >
      sh -c "
        echo 'Waiting for /init/create-bucket.sh to be mounted...';
        while [ ! -f /init/create-bucket.sh ]; do
          sleep 1;
        done;
        echo 'Found /init/create-bucket.sh, executing...';
        sh /init/create-bucket.sh
      "
    volumes:
      - ./init:/init # 스크립트가 있는 디렉토리를 컨테이너의 /init으로 마운트
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
      MINIO_BUCKET_NAME: uploads # 버킷 이름 설정 (필요에 따라 변경)
    networks:
      - app-network
    restart: on-failure # 실패 시 재시도

  truffle:
    build:
      context: ./truffle
      dockerfile: Dockerfile
    container_name: truffle-container
    networks:
      - app-network
    volumes:
      - ./truffle:/app
    # 개발용 포트(필요시)
    ports:
      - "9545:9545"  
    tty: true

  geth-node1:
    image: ethereum/client-go:v1.10.15
    container_name: geth-node1
    volumes:
      - ./geth-network/node1:/root/.ethereum
    command:
      --networkid 1004 --http --http.addr 0.0.0.0 --http.port 8545
      --port 30303 --http.api eth,net,web3,personal,miner --allow-insecure-unlock
      --datadir /root/.ethereum --syncmode full
    ports:
      - "8545:8545"
      - "30303:30303"
    networks:
      - app-network

  geth-node2:
    image: ethereum/client-go:v1.10.15
    container_name: geth-node2
    volumes:
      - ./geth-network/node2:/root/.ethereum
    command:
      --networkid 1004 --http --http.addr 0.0.0.0 --http.port 8546
      --port 30304 --http.api eth,net,web3,personal,miner --allow-insecure-unlock
      --datadir /root/.ethereum --syncmode full
    ports:
      - "8546:8546"
      - "30304:30304"
    networks:
      - app-network

  geth-node3:
    image: ethereum/client-go:v1.10.15
    container_name: geth-node3
    volumes:
      - ./geth-network/node3:/root/.ethereum
    command:
      --networkid 1004 --http --http.addr 0.0.0.0 --http.port 8547
      --port 30305 --http.api eth,net,web3,personal,miner --allow-insecure-unlock
      --datadir /root/.ethereum --syncmode full
    ports:
      - "8547:8547"
      - "30305:30305"
    networks:
      - app-network
networks:
  app-network:
    driver: bridge
